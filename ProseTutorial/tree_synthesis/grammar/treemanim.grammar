using TreeManipulation;

using semantics TreeManipulation.Semantics;
using learners TreeManipulation.WitnessFunctions;

language TreeManim;

@complete feature double Score = TreeManipulation.RankingScore,
								 TreeManipulation.LikelihoodScore,
								 TreeManipulation.ReadabilityScore;

@input ProseHtmlNode tree;

@start IReadOnlyList<ProseHtmlNode> program := rule;

IReadOnlyList<ProseHtmlNode> rule
	:= Concat(rule, rule)
//	 | MatchNodes(match, nodes) = Filter(\x: ProseHtmlNode => match, nodes)
	 | nodes

IReadOnlyList<ProseHtmlNode> nodes 
	:= Children(subTree)
     | Descendants(subTree)
	 | Single(subTree)
	 | DescendantsWithTag(subTree, tag) // Needed because disjunctive filter doesn't work

ProseHtmlNode subTree 
	:= //KthDescendantWithTag(subTree, tag, k) // Needed because disjunctive filter doesn't work
	 | SelectChild(rule, k) = Kth(rule, k)
	 | tree

//bool match 
//	:= MatchTag(x, tag)
//	 | MatchAttribute(x, attr)
//	 | True()

string tag;
string attr;
string value;
int k; 

