using WebSynthesis.TreeManipulation;

using semantics WebSynthesis.TreeManipulation.Semantics;
using learners WebSynthesis.TreeManipulation.WitnessFunctions;

language WebSynthesis.TreeManipulation;

@complete feature double Score = WebSynthesis.TreeManipulation.RankingScore,
								 WebSynthesis.TreeManipulation.LikelihoodScore,
								 WebSynthesis.TreeManipulation.ReadabilityScore;

@input ProseHtmlNode tree;

@start IReadOnlyList<ProseHtmlNode> program := rule;

IReadOnlyList<ProseHtmlNode> rule
	:= Concat(rule, rule)
	 | MatchNodes(match, nodes) = Filter(\x: ProseHtmlNode => match, nodes)
	 | nodes

IReadOnlyList<ProseHtmlNode> nodes 
	:= Children(subTree)
     | Descendants(subTree)
	 | Single(subTree)

ProseHtmlNode subTree 
	:= KthDescendantWithTag(subTree, tag, k) // Needed because disjunctive filter doesn't work
	 | SelectChild(rule, k) = Kth(rule, k)
	 | tree

bool match 
	:= MatchTag(x, tag)
	 | MatchAttribute(x, attr)
	 | True()

string tag;
string attr;
string value;
int k; 

